#!/usr/bin/env python

"""
Generates a list of all exports from libmupdf.dll from the function lists
contained in the mupdf/include/* headers (only MuPDF and MuXPS are included)
and adds exports for the other libraries contained within libmupdf.dll but
used by SumatraPDF-no-MuPDF.exe (unarr, libdjvu, zlib, lzma, libwebp).
"""

import os, re, sys

def collectExports(header):
	try:
		data = open(header, "r", encoding='utf8').read()
		data = re.sub(r"(?sm)^#ifndef NDEBUG\s.*?^#endif", "", data, 0)
		data = re.sub(r"(?sm)^#ifdef ARCH_ARM\s.*?^#endif", "", data, 0)
		data = re.sub(r"(?sm)^#ifdef FITZ_DEBUG_LOCKING\s.*?^#endif", "", data, 0)
		data = re.sub(r"(?sm)^#ifndef SQLITE_OMIT_DEPRECATED\s.*?^#endif", "", data, 0)
		data = re.sub(r"(?sm)^static +\w+ *\*?\*? +(?:\w+ *\*?\*? +)*\*?\*?\w+ *\(.*?\);?", "", data, 0)
		data = re.sub(r"(?sm)^\w+ *\*?\*? +SQLITE_DEPRECATED +(?:\w+ *\*?\*? )*\*?\*?\w+ *\(.*?\);", "", data, 0)
		data = data.replace(" FZ_NORETURN;", ";")
		data = re.sub(r"(?sm)^PTW32_DLLPORT +", "", data, 0)
		data = re.sub(r"(?sm)PTW32_CDECL +", "", data, 0)
		data = re.sub(r"(?sm)FGAPIENTRY +", "", data, 0)
		data = re.sub(r"(?sm)^typedef\s+[^;]+;", "", data, 0)
		flist = re.findall(r"(?sm)^\w+ *\*?\*? +(?:\w+ *\*?\*? +)*\*?\*?(\w+) *\(.*?\);", data)
		print( "RAW DLL EXPORT DATA: processing file %s -->\n%s" % ( header, flist ) )
		return sorted(flist)
	except: # catch *all* exceptions
		e = sys.exc_info()[0]
		print( "Error: %s while processing file %s" % ( e, header ) )
		# raise

def generateExports(header, exclude=[]):
	if os.path.isdir(header):
		return "\n".join([generateExports(os.path.join(header, file), exclude) for file in os.listdir(header) if re.match(r'.*?[.][hH]', file)])

	functions = collectExports(header)
	return "\n".join(["\t" + name for name in functions if name not in exclude])

def generateQuickJSExports(header, exclude=[]):
	if os.path.isdir(header):
		return "\n".join([generateExports(os.path.join(header, file), exclude) for file in os.listdir(header) if re.match(r'quickjs[a-z-]*?[.][hH]', file)])

	functions = collectExports(header)
	return "\n".join(["\t" + name for name in functions if name not in exclude])

def collectFunctions(file):
	data = open(file, "r", encoding='utf8').read()
	return sorted(re.findall(r"(?sm)^\w+(?: \*\n|\n| \*| )((?:fz_|pdf_|xps_)\w+) *\(", data))

def generateExportsJpeg(file, exclude=[], include=[]):
	data = open(file, "r", encoding='utf8').read()
	data = re.sub(r"(?sm)^\s*JMETHOD *\([^\)]*\)", "", data, 0)
	data = re.sub(r"(?sm)[\s\r\n]+JPP *\([^\)]*\)", "(XXXXX)", data, 0)
	data = re.sub(r"(?sm)\([^\)]*\)", "(XXXXX)", data, 0)
	functions = sorted(re.findall(r"(?sm)^EXTERN *\([^)]+\) +(\w+)\s*\(XXXXX\)", data))
	return "\n".join(["\t" + name for name in functions if name not in exclude]) + "\n" + "\n".join(["\t" + name for name in include])

def generateExportsPng(file, exclude=[], include=[]):
	data = open(file, "r", encoding='utf8').read()
	functions = sorted(re.findall(r"(?sm)^PNG_EXPORT(?:A?) *\([^),]+,[^),]+,\s*(\w+)\s*,[\s\r\n]*\([^)]+\)", data))
	return "\n".join(["\t" + name for name in functions if name not in exclude]) + "\n" + "\n".join(["\t" + name for name in include])

LIBMUPDF_DEF = """\
; This file is auto-generated by gen_libmupdf.def.py

LIBRARY MuPDFLib

EXPORTS

; MuPDF tool exports

%(tool_exports)s

; MuPDF ucdn exports

%(ucdn_exports)s

; PKCS7 exports

%(pkcs7ex_exports)s

; Tesseract OCR exports

%(ocr_exports)s

%(ocr_train_exports)s

; curl exports

%(curl_exports)s

%(curl_time_exports)s

	curlx_win32_open
	curlx_win32_stat
	curlx_win32_fopen
	curlx_win32_access

; platform exports

%(platform_exports)s

; helpers exports

%(helpers_exports)s

; Fitz Documents exports

%(pubdoc_exports)s

; Fitz exports

	; data, not a function:
	fz_identity                       DATA

	fz_optarg                         DATA
	fz_optind                         DATA

	fz_infinite_rect                  DATA
	fz_empty_rect                     DATA
	fz_invalid_rect                   DATA
	fz_unit_rect                      DATA
	fz_infinite_irect                 DATA
	fz_empty_irect                    DATA
	fz_invalid_irect                  DATA
	fz_unit_irect                     DATA

	pdf_default_write_options         DATA
	fz_default_color_params           DATA

	fz_draw_options_usage             DATA

	fz_default_stroke_state           DATA

	fz_stext_options_usage            DATA

	fz_pdf_write_options_usage        DATA
	fz_svg_write_options_usage        DATA

	fz_pcl_write_options_usage        DATA
	fz_pclm_write_options_usage       DATA
	fz_pwg_write_options_usage        DATA
	fz_pdfocr_write_options_usage     DATA

	fz_glyph_name_from_adobe_standard DATA
	fz_glyph_name_from_iso8859_7      DATA
	fz_glyph_name_from_koi8u          DATA
	fz_glyph_name_from_mac_expert     DATA
	fz_glyph_name_from_mac_roman      DATA
	fz_glyph_name_from_win_ansi       DATA
	fz_glyph_name_from_windows_1252   DATA

	fz_unicode_from_iso8859_1         DATA
	fz_unicode_from_iso8859_7         DATA
	fz_unicode_from_koi8u             DATA
	fz_unicode_from_pdf_doc_encoding  DATA
	fz_unicode_from_windows_1250      DATA
	fz_unicode_from_windows_1251      DATA
	fz_unicode_from_windows_1252      DATA

	sqlite3OSTrace                    DATA

	fz_report_failed_assertion
	fz_report_failed_assertion_and_continue

	jbig2_set_error_log_prefilter_level

	jbig2dec_main
	jbig2dec_arith_test_main
	jbig2dec_huffman_test_main
	jbig2dec_pbm2png_main

%(fitz_exports)s

; MuPDF exports

%(mupdf_exports)s

; libJPEG exports

%(libjpeg_exports)s

%(libjpeg_exports2)s

; libJPEG-TURBO exports

%(libjpegturbo_exports)s

%(libjpegturbo_exports2)s

; libJPEGXL exports

%(libjpegXL_exports)s

%(libjpegXL2_exports)s

; libGIF exports

%(libgif_exports)s

; libPNG exports

%(libpng_exports)s

; libTIFF exports

%(libtiff_exports)s

; libWEBP exports

%(libwebp_exports)s

%(libwebp_exports2)s

; libbrotli exports

%(libbrotli_exports)s

%(libbrotli2_exports)s

; libzopfli exports

%(libzopfli_exports)s

; libzopflipng exports

%(libzopflipng_exports)s

; libSQLite3 exports

%(sqlite3_exports)s

%(sqlite3_exports2)s

; MuJS exports

%(mujs_exports)s

; freeGLut exports

%(freeglut_exports)s

; libXML2 exports

%(libxml_exports)s

; pthread-Win32 exports

%(pthread_exports)s

; zlib exports

%(zlib_exports)s

; QuickJS exports

%(quickjs_exports)s

; Zstd exports

%(zstd_exports)s

; crow exports

%(crow_exports)s

; MarkDown exports

%(markdown_exports)s

; MuPDF/Fitz default heap debug exports

%(debugheap_exports)s

; monolithic tool exports

	pngcrush_main
	pngmeta_main
	pngzop_zlib_to_idat_main
	pngidat_main
	pngiend_main
	pngihdr_main

; extra debug APIs and other misc extras

	fz_dump_lock_times

%(mupdfdll_exports)s

"""

def main():
	os.chdir(os.path.join(os.path.dirname(__file__), "../.."))

	# don't include/export doc_* functions, support for additional input/output formats and form support
	doc_exports = collectFunctions("source/fitz/document-all.c") + ["fz_log_dump_store"]
	more_formats = []
	form_exports = []
	misc_exports = ["fz_valgrind_pixmap", "track_usage", "fz_error_print_callback"]
	sign_exports = ["from"]
	pkcs7_ignores = ["pkcs7_openssl_check_digest", "pkcs7_openssl_check_certificate", "pkcs7_openssl_distinguished_name"]
	office_exports = collectExports("include/mupdf/helpers/mu-office-lib.h")

	fitz_exports = generateExports("include/mupdf/fitz", doc_exports + more_formats + misc_exports)
	pubdoc_exports = generateExports("include/mupdf/fitz/document.h")
	mupdf_exports = generateExports("include/mupdf/pdf", sign_exports)
	tool_exports = generateExports("include/mupdf/mutool.h")
	ucdn_exports = generateExports("include/mupdf/ucdn.h")
	ocr_exports = generateExports("source/fitz/tessocr.h")
	ocr_train_exports = generateExports("thirdparty/tesseract/include/tesseract/capi_training_tools.h")
	curl_exports = generateExports("thirdparty/curl/include/curl", ["fread", "fwrite", "strcasecmp", "strncasecmp", "CURL_DEPRECATED"])
	curl_time_exports = generateExports("thirdparty/curl/lib/timeval.h")
	platform_exports = generateExports("platform/x11/curl_stream.h")
	pkcs7ex_exports = generateExports("include/mupdf/helpers/pkcs7-openssl.h", pkcs7_ignores)
	helpers_exports = generateExports("include/mupdf/helpers", office_exports + pkcs7_ignores)
	libjpeg_exports = generateExportsJpeg("thirdparty/owemdjee/libjpeg-turbo/jpeglib.h")
	libjpeg_exports2 = generateExportsJpeg("thirdparty/owemdjee/libjpeg-turbo/jmemsys.h")
	libjpegturbo_exports = generateExports("thirdparty/owemdjee/libjpeg-turbo/turbojpeg.h")
	libjpegturbo_exports2 = generateExports("thirdparty/owemdjee/libjpeg-turbo/monolithic_examples.h")
	libpng_exports = generateExportsPng("thirdparty/libpng/png.h", ["png_set_strip_error_numbers", "png_err"])
	libtiff_exports = generateExports("thirdparty/libtiff/libtiff/tiffio.h")
	libgif_exports = generateExports("thirdparty/owemdjee/libgif/gif_lib.h")
	libwebp_exports = generateExports("thirdparty/owemdjee/libwebp/src/webp")
	libwebp_exports2 = generateExports("thirdparty/owemdjee/libwebp/extras/tools.h")
	libjpegXL_exports = generateExports("thirdparty/owemdjee/jpeg-xl/lib/include")
	libjpegXL2_exports = generateExports("thirdparty/owemdjee/jpeg-xl/lib/include/jxl", ["JxlEncoderAddBox", "JxlEncoderSetExtraChannelBuffer"])
	libbrotli_exports = generateExports("thirdparty/owemdjee/brotli/c/include")
	libbrotli2_exports = generateExports("thirdparty/owemdjee/brotli/c/include/brotli")
	libzopfli_exports = generateExports("thirdparty/owemdjee/libzopfli/src/zopfli/monolithic_examples.h")
	libzopflipng_exports = generateExports("thirdparty/owemdjee/libzopfli/src/zopflipng/monolithic_examples.h")
	sqlite3_exports = generateExports("thirdparty/owemdjee/sqlite-amalgamation/sqlite3.h", ["sqlite3_activate_cerod", "sqlite3_enable_load_extension", "sqlite3_load_extension"])
	sqlite3_exports2 = generateExports("thirdparty/owemdjee/sqlite/monolithic_examples.h")
	mujs_exports = generateExports("thirdparty/mujs/mujs.h")
	freeglut_exports = generateExports("thirdparty/freeglut/include/GL")
	libxml_exports = generateExports("thirdparty/owemdjee/libxml2/include/libxml", ["__xmlFree", "__xmlMalloc", "__xmlMallocAtomic", "__xmlMemStrdup", "__xmlRealloc", "xml_test_xmlreader_main"])
	pthread_exports = generateExports("thirdparty/owemdjee/pthread-win32", ["_errno", "DWORD", "pthread_win32_set_terminate_np"])
	zlib_exports = generateExports("scripts/zlib/zlib-ng.h", ["zng_inflateBackInit", "zng_gzgetc_"])
	quickjs_exports = generateExports("thirdparty/owemdjee/QuickJS/monolithic_examples.h") + generateQuickJSExports("thirdparty/owemdjee/QuickJS", ["__js_printf_like"])
	markdown_exports = generateExports("thirdparty/owemdjee/upskirt-markdown/bin")
	zstd_exports = generateExports("thirdparty/owemdjee/zstd/programs", ["zstd_fitblk_example_main", "zstd_mini_gzip_main", "zstd_zwrapbench_main", "zstd_zlib_example_main", "BMK_benchFunction", "BMK_benchTimedFn", "BMK_createTimedFnState", "BMK_extract_errorResult", "BMK_extract_runTime", "BMK_freeTimedFnState", "BMK_initStatic_timedFnState", "BMK_isCompleted_TimedFn", "BMK_isSuccessful_runOutcome", "BMK_resetTimedFnState", "BMK_benchFiles", "BMK_benchFilesAdvanced", "BMK_benchMem", "BMK_benchMemAdvanced", "BMK_extract_benchResult", "BMK_initAdvancedParams", "BMK_isSuccessful_benchOutcome", "BMK_syntheticTest", "RDG_genBuffer", "RDG_genStdout"])
	crow_exports = generateExports("thirdparty/owemdjee/crow/include/crow/monolithic_examples.h")
	mupdfdll_exports = generateExports("scripts/MuPDFLib/versions-api.h")
	debugheap_exports = generateExports("include/mupdf/helpers/debugheap.h")

	list = LIBMUPDF_DEF % locals()
	# remove duplicate entries
	lines = list.splitlines()
	new_lines = []
	empties = 0
	for line in lines:
		# Strip white spaces
		str = line.strip()
		if not str:
			empties = empties + 1
			if empties < 2:
				new_lines.append(str)
		else:
			empties = 0
			if line not in new_lines:
				new_lines.append(line)
	list = "\n".join(new_lines)
	list = list.replace("\n", "\r\n")
	open("platform/win32/libmupdf.def", "wb").write(list.encode('utf8'))

if __name__ == "__main__":
	main()
